const path = require("path");
const fileModel = require("../models/fileModel");
const db = require("../config/db");
const fs = require("fs");

const getFiles = async (req, res) => {
  try {
    const userId = req.user.id;
    console.log("üîç getFiles zavol√°n pro u≈æivatele:", userId);

    const [results] = await db.query("SELECT * FROM files WHERE owner = ?", [
      userId,
    ]);

    console.log("‚úÖ V√Ωsledky:", results);
    return res.status(200).json(results);
  } catch (err) {
    console.error("‚ùå Chyba p≈ôi z√≠sk√°v√°n√≠ soubor≈Ø:", err);
    return res
      .status(500)
      .json({ message: "Server error p≈ôi z√≠sk√°v√°n√≠ soubor≈Ø" });
  }
};

const getFileById = async (req, res) => {
  const id = req.params.id;
  const userId = req.user.id;
  console.log("üîç getFileById zavol√°n pro ID:", id);

  try {
    const file = await fileModel.findByIdAndOwner(id, userId);
    if (!file) {
      return res.status(404).json({ message: "Soubor nebyl nalezen" });
    }

    res.status(200).json(file);
  } catch (err) {
    console.error("‚ùå Chyba v getFileById:", err);
    res.status(500).json({ message: "Chyba serveru" });
  }
};

const updateFile = async (req, res) => {
  const fileId = req.params.id;
  const userId = req.user.id;
  const { fileName, hardwarePinHash } = req.body;

  console.log("üõ†Ô∏è updateFile zavol√°n:", fileId, "u≈æivatel:", userId);

  try {
    const file = await fileModel.findByIdAndOwner(fileId, userId);
    if (!file) {
      return res
        .status(403)
        .json({ message: "Nem√°te opr√°vnƒõn√≠ upravovat tento soubor" });
    }

    const updated = await fileModel.updateById(fileId, {
      fileName,
      hardwarePinHash,
    });

    res.status(200).json(updated);
  } catch (err) {
    console.error("‚ùå Chyba p≈ôi aktualizaci souboru:", err);
    res.status(500).json({ message: "Chyba serveru p≈ôi aktualizaci" });
  }
};

const deleteFile = async (req, res) => {
  const fileId = req.params.id;
  const userId = req.user.id;

  console.log("üóëÔ∏è deleteFile zavol√°n", fileId, "u≈æivatel:", userId);

  try {
    const file = await fileModel.findByIdAndOwner(fileId, userId);
    if (!file) {
      return res
        .status(404)
        .json({ message: "Soubor nenalezen nebo p≈ô√≠stup odep≈ôen" });
    }

    await fileModel.deleteById(fileId);

    const filePath = path.join(__dirname, "..", file.localUrl);
    fs.unlink(filePath, (err) => {
      if (err) {
        console.warn(
          "‚ö†Ô∏è Soubor v souborov√©m syst√©mu nebyl nalezen nebo ji≈æ byl smaz√°n:",
          err.message
        );
      }
    });

    res.status(204).send();
  } catch (err) {
    console.error("‚ùå Chyba v deleteFile:", err);
    res.status(500).json({ message: "Chyba serveru" });
  }
};

const uploadFile = async (req, res) => {
  try {
    if (!req.file) {
      return res.status(400).json({ message: "Soubor nebyl nahr√°n" });
    }

    const { filename, size, path: filePath } = req.file;
    const ownerId = req.user.id;

    // ulo≈æit metadata do DB
    const newFile = await fileModel.createFile({
      fileName: filename,
      localUrl: filePath,
      size,
      owner: ownerId,
      created_by: ownerId,
    });

    res.status(201).json(newFile);
  } catch (err) {
    console.error("Chyba p≈ôi uploadu souboru:", err);
    res.status(500).json({ message: "Chyba serveru p≈ôi nahr√°v√°n√≠ souboru" });
  }
};

module.exports = {
  uploadFile,
  getFiles,
  getFileById,
  updateFile,
  deleteFile,
};
