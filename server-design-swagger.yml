openapi: "3.0.3"
info:
  title: SecureDoc Project Server API
  version: "1.0.0"
  description: >
    This API is used for the server component of SecureDoc project.
    It supports JWT-based authentication, file uploads (with a corresponding database record),
    REST endpoints for file and user management, and permission handling on files.
servers:
  - url: http://localhost:3000
    description: Local development server
components:
  securitySchemes:
    authToken:
      type: apiKey
      in: header
      name: authorization-x
  schemas:
    LoginRequest:
      type: object
      properties:
        email:
          type: string
          format: email
        password:
          type: string
      required:
        - email
        - password
    TokenResponse:
      type: object
      properties:
        token:
          type: string
      required:
        - token
    RegisterRequest:
      type: object
      properties:
        email:
          type: string
          format: email
        password:
          type: string
      required:
        - email
        - password
    User:
      type: object
      properties:
        id:
          type: string
        email:
          type: string
          format: email
        role:
          type: string
          enum:
            - user
            - admin
          description: "Default is 'user' for registration"
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time
      required:
        - id
        - email
        - role
        - created_at
    File:
      type: object
      properties:
        id:
          type: string
        fileName:
          type: string
        localUrl:
          type: string
          description: "Local path/URL where file is stored"
        size:
          type: integer
          description: "File size in bytes"
        owner:
          type: string
          description: "ID of the user who owns the file"
        created_by:
          type: string
          description: "ID of the user who created the record"
        created_at:
          type: string
          format: date-time
      required:
        - id
        - fileName
        - localUrl
        - size
        - owner
        - created_by
        - created_at
    FileAccess:
      type: object
      properties:
        id:
          type: string
        fileId:
          type: string
        userId:
          type: string
        permission:
          type: string
          enum:
            - read
            - write
        created_at:
          type: string
          format: date-time
      required:
        - id
        - fileId
        - userId
        - permission
        - created_at

paths:
  /auth/login:
    post:
      summary: User login and JWT token generation
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginRequest'
      responses:
        '200':
          description: Successful login returning a JWT token
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TokenResponse'
        '401':
          description: Unauthorized – invalid credentials provided
  /auth/register:
    post:
      summary: User registration (assigns default role "user")
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RegisterRequest'
      responses:
        '201':
          description: New user registered successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          description: Bad Request – invalid input data
  /file:
    get:
      summary: Retrieve a list of files
      security:
        - authToken: []
      responses:
        '200':
          description: A list of file records
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/File'
    post:
      summary: Upload a file and create a file record
      security:
        - authToken: []
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                file:
                  type: string
                  format: binary
              required:
                - file
      responses:
        '201':
          description: File uploaded and record created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/File'
        '400':
          description: Bad Request – error in file upload or missing file data
  /file/{id}:
    parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
    get:
      summary: Retrieve file details by ID
      security:
        - authToken: []
      responses:
        '200':
          description: File details retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/File'
        '404':
          description: File not found
    put:
      summary: Update a file record
      security:
        - authToken: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/File'
      responses:
        '200':
          description: File record updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/File'
        '400':
          description: Bad Request – invalid data provided
    delete:
      summary: Delete a file record by ID
      security:
        - authToken: []
      responses:
        '204':
          description: File deleted successfully
        '404':
          description: File not found
  /download/{id}:
    get:
      summary: Generate temporary download link to stream the file
      security:
        - authToken: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Temporary download link provided
          content:
            application/json:
              schema:
                type: object
                properties:
                  download_url:
                    type: string
                    description: "Temporary URL to download/stream the file"
        '403':
          description: Forbidden – insufficient permissions to download file
        '404':
          description: File not found
  /file/{id}/user:
    parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
    get:
      summary: Get a list of users with access permissions for a file
      security:
        - authToken: []
      responses:
        '200':
          description: List of users having access to the file
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
    post:
      summary: Grant a user access to the file (requires file owner or write permission)
      security:
        - authToken: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                userId:
                  type: string
                permission:
                  type: string
                  enum:
                    - read
                    - write
                  description: "Permission level (defaults to 'read' if not specified)"
              required:
                - userId
      responses:
        '201':
          description: User access granted successfully for the file
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FileAccess'
        '403':
          description: Forbidden – you are not authorized to add access for this file
  /user:
    get:
      summary: Retrieve a list of all users
      security:
        - authToken: []
      responses:
        '200':
          description: A list of users
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
  /user/{id}:
    parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
    get:
      summary: Retrieve user details by ID
      security:
        - authToken: []
      responses:
        '200':
          description: User details successfully retrieved
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '404':
          description: User not found
    put:
      summary: Update user details
      security:
        - authToken: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        '200':
          description: User details updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
    delete:
      summary: Delete a user by ID
      security:
        - authToken: []
      responses:
        '204':
          description: User deleted successfully
        '404':
          description: User not found
